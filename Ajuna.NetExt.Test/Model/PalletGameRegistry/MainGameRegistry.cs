//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.PrimitiveTypes;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Ajuna.NetApi.Model.PalletGameRegistry
{
    
    
    public sealed class GameRegistryStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public GameRegistryStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "Queued"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "Players"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128}, typeof(Ajuna.NetApi.Model.SpCore.AccountId32), typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> QueuedParams
        /// </summary>
        public static string QueuedParams()
        {
            return RequestGenerator.GetStorage("GameRegistry", "Queued", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Queued
        /// </summary>
        public async Task<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>> Queued(CancellationToken token)
        {
            string parameters = GameRegistryStorage.QueuedParams();
            return await _client.GetStorageAsync<BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
        
        /// <summary>
        /// >> PlayersParams
        /// </summary>
        public static string PlayersParams(Ajuna.NetApi.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("GameRegistry", "Players", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Players
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> Players(Ajuna.NetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = GameRegistryStorage.PlayersParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
    
    public sealed class GameRegistryCalls
    {
        
        /// <summary>
        /// >> queue
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Queue()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(17, "GameRegistry", 0, "queue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> drop_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DropGame(Ajuna.NetApi.Model.Types.Primitive.U32 game_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_id.Encode());
            return new Method(17, "GameRegistry", 1, "drop_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ack_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AckGame(BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32> game_ids, Ajuna.NetApi.Model.PrimitiveTypes.H256 shard_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_ids.Encode());
            byteArray.AddRange(shard_id.Encode());
            return new Method(17, "GameRegistry", 2, "ack_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> finish_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method FinishGame(Ajuna.NetApi.Model.Types.Primitive.U32 game_id, Ajuna.NetApi.Model.SpCore.AccountId32 winner, Ajuna.NetApi.Model.PrimitiveTypes.H256 shard_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_id.Encode());
            byteArray.AddRange(winner.Encode());
            byteArray.AddRange(shard_id.Encode());
            return new Method(17, "GameRegistry", 3, "finish_game", byteArray.ToArray());
        }
    }
    
    public enum GameRegistryErrors
    {
        
        /// <summary>
        /// >> AcknowledgeBatchTooLarge
        /// Too many games trying to be acknowledged in batch.
        /// </summary>
        AcknowledgeBatchTooLarge,
        
        /// <summary>
        /// >> NoGameEntry
        /// There is no such game entry.
        /// </summary>
        NoGameEntry,
        
        /// <summary>
        /// >> AlreadyQueued
        /// Player is already queued for a match.
        /// </summary>
        AlreadyQueued,
        
        /// <summary>
        /// >> InvalidWinner
        /// Invalid winner
        /// </summary>
        InvalidWinner,
        
        /// <summary>
        /// >> NotSignedByObserver
        /// Not Signed by an Observer
        /// </summary>
        NotSignedByObserver,
        
        /// <summary>
        /// >> InvalidPayload
        /// Invalid payload
        /// </summary>
        InvalidPayload,
        
        /// <summary>
        /// >> InvalidGameState
        /// Invalid game state
        /// </summary>
        InvalidGameState,
        
        /// <summary>
        /// >> FailedToQueue
        /// Failed to queue
        /// </summary>
        FailedToQueue,
        
        /// <summary>
        /// >> AlreadyPlaying
        /// Already playing
        /// </summary>
        AlreadyPlaying,
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.PalletMatchmaker;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Ajuna.NetApi.Model.PalletMatchmaker
{
    
    
    public sealed class MatchmakerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public MatchmakerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Matchmaker", "Brackets"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(Ajuna.NetApi.Model.PalletMatchmaker.BracketRange)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Matchmaker", "Players"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>), typeof(Ajuna.NetApi.Model.SpCore.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Matchmaker", "PlayerQueue"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.SpCore.AccountId32), typeof(BaseTuple)));
        }
        
        /// <summary>
        /// >> BracketsParams
        ///  Map of brackets with their index
        /// </summary>
        public static string BracketsParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Matchmaker", "Brackets", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Brackets
        ///  Map of brackets with their index
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletMatchmaker.BracketRange> Brackets(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = MatchmakerStorage.BracketsParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletMatchmaker.BracketRange>(parameters, token);
        }
        
        /// <summary>
        /// >> PlayersParams
        ///  A double map indexed by bracket and account
        /// </summary>
        public static string PlayersParams(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Matchmaker", "Players", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Players
        ///  A double map indexed by bracket and account
        /// </summary>
        public async Task<Ajuna.NetApi.Model.SpCore.AccountId32> Players(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            string parameters = MatchmakerStorage.PlayersParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> PlayerQueueParams
        ///  A map tracking which accounts are queued
        /// </summary>
        public static string PlayerQueueParams(Ajuna.NetApi.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Matchmaker", "PlayerQueue", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PlayerQueue
        ///  A map tracking which accounts are queued
        /// </summary>
        public async Task<BaseTuple> PlayerQueue(Ajuna.NetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = MatchmakerStorage.PlayerQueueParams(key);
            return await _client.GetStorageAsync<BaseTuple>(parameters, token);
        }
    }
    
    public sealed class MatchmakerCalls
    {
    }
    
    /// <summary>
    /// >> Queued
    /// Player is queued for a match.
    /// </summary>
    public sealed class EventQueued : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Matched
    /// Players are now matched and have been removed from the queue
    /// </summary>
    public sealed class EventMatched : BaseTuple<BaseVec<Ajuna.NetApi.Model.SpCore.AccountId32>>
    {
    }
}

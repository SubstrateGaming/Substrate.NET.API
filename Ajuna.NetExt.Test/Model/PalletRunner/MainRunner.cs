//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.AjunaCommon;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Ajuna.NetApi.Model.PalletRunner
{
    
    
    public sealed class RunnerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public RunnerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Runner", "Runners"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(Ajuna.NetApi.Model.AjunaCommon.EnumRunnerState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Runner", "Nonce"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> RunnersParams
        ///  Stores a map of the runners with its configuration and state
        /// </summary>
        public static string RunnersParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Runner", "Runners", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Runners
        ///  Stores a map of the runners with its configuration and state
        /// </summary>
        public async Task<Ajuna.NetApi.Model.AjunaCommon.EnumRunnerState> Runners(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = RunnerStorage.RunnersParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.AjunaCommon.EnumRunnerState>(parameters, token);
        }
        
        /// <summary>
        /// >> NonceParams
        ///  A nonce
        /// </summary>
        public static string NonceParams()
        {
            return RequestGenerator.GetStorage("Runner", "Nonce", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Nonce
        ///  A nonce
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> Nonce(CancellationToken token)
        {
            string parameters = RunnerStorage.NonceParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
    
    public sealed class RunnerCalls
    {
    }
    
    /// <summary>
    /// >> StateQueued
    /// Runner Queued
    /// </summary>
    public sealed class EventStateQueued : BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> StateAccepted
    /// Runner Accepted
    /// </summary>
    public sealed class EventStateAccepted : BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> StateFinished
    /// Runner Finished
    /// </summary>
    public sealed class EventStateFinished : BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32>
    {
    }
    
    public enum RunnerErrors
    {
        
        /// <summary>
        /// >> InternalError
        /// An internal error has occurred
        /// </summary>
        InternalError,
        
        /// <summary>
        /// >> InvalidState
        /// A errorneous state transition
        /// </summary>
        InvalidState,
        
        /// <summary>
        /// >> UnknownRunner
        /// Indentifier used for runner is unknown
        /// </summary>
        UnknownRunner,
    }
}
